events {
    worker_connections 1024;
}

http {
    upstream api_servers {
        least_conn;
        server api1:80 max_fails=3 fail_timeout=30s;
        server api2:80 max_fails=3 fail_timeout=30s;
        server api3:80 max_fails=3 fail_timeout=30s;
    }

    upstream web_servers {
        least_conn;
        server web1:80 max_fails=3 fail_timeout=30s;
        server web2:80 max_fails=3 fail_timeout=30s;
    }

    # Rate limiting
    limit_req_zone $binary_remote_addr zone=api_limit:10m rate=10r/s;
    limit_req_zone $binary_remote_addr zone=web_limit:10m rate=20r/s;

    # API Load Balancer
    server {
        listen 80;
        server_name api.restaurant.local;

        # Rate limiting
        limit_req zone=api_limit burst=20 nodelay;

        # CORS headers
        add_header Access-Control-Allow-Origin *;
        add_header Access-Control-Allow-Methods "GET, POST, PUT, DELETE, OPTIONS";
        add_header Access-Control-Allow-Headers "Content-Type, Authorization";

        location / {
            proxy_pass http://api_servers;
            proxy_set_header Host $host;
            proxy_set_header X-Real-IP $remote_addr;
            proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
            proxy_set_header X-Forwarded-Proto $scheme;

            # Health check
            proxy_next_upstream error timeout invalid_header http_500 http_502 http_503 http_504;
            proxy_connect_timeout 5s;
            proxy_send_timeout 10s;
            proxy_read_timeout 10s;
        }

        # Health check endpoint
        location /health {
            access_log off;
            return 200 "healthy\n";
            add_header Content-Type text/plain;
        }
    }

    # Web UI Load Balancer
    server {
        listen 80;
        server_name web.restaurant.local;

        # Rate limiting
        limit_req zone=web_limit burst=30 nodelay;

        location / {
            proxy_pass http://web_servers;
            proxy_set_header Host $host;
            proxy_set_header X-Real-IP $remote_addr;
            proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
            proxy_set_header X-Forwarded-Proto $scheme;

            # Health check
            proxy_next_upstream error timeout invalid_header http_500 http_502 http_503 http_504;
            proxy_connect_timeout 5s;
            proxy_send_timeout 10s;
            proxy_read_timeout 10s;
        }

        # Static files caching
        location ~* \.(css|js|png|jpg|jpeg|gif|ico|svg)$ {
            expires 1y;
            add_header Cache-Control "public, immutable";
            proxy_pass http://web_servers;
        }
    }

    # Monitoring endpoint
    server {
        listen 8080;
        server_name monitoring.restaurant.local;

        location /nginx_status {
            stub_status on;
            access_log off;
            allow 127.0.0.1;
            deny all;
        }
    }
} 