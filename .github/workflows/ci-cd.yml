name: Enterprise CI/CD Pipeline

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main ]

env:
  REGISTRY: ghcr.io
  IMAGE_NAME: ${{ github.repository }}

jobs:
  security-scan:
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v4
    
    - name: Run Trivy vulnerability scanner
      uses: aquasecurity/trivy-action@master
      with:
        scan-type: 'fs'
        scan-ref: '.'
        format: 'sarif'
        output: 'trivy-results.sarif'

    - name: Upload Trivy scan results to GitHub Security tab
      uses: github/codeql-action/upload-sarif@v3
      if: always()
      with:
        sarif_file: 'trivy-results.sarif'

  build:
    runs-on: ubuntu-latest
    needs: security-scan

    steps:
    - uses: actions/checkout@v4

    - name: Setup .NET
      uses: actions/setup-dotnet@v4
      with:
        dotnet-version: '9.0.x'

    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '18'

    - name: Restore dependencies
      run: dotnet restore

    - name: Build
      run: dotnet build --no-restore --configuration Release

    - name: Run tests with coverage
      run: |
        dotnet test --no-build --verbosity normal --configuration Release --collect:"XPlat Code Coverage" --results-directory ./coverage

    - name: Upload coverage reports
      uses: codecov/codecov-action@v3
      with:
        file: ./coverage/**/coverage.cobertura.xml
        flags: unittests
        name: codecov-umbrella

    - name: Publish API
      run: dotnet publish SD_Restaurant.API/SD_Restaurant.API.csproj -c Release -o ./publish/api

    - name: Publish Web
      run: dotnet publish SD_Restaurant.Web/SD_Restaurant.Web.csproj -c Release -o ./publish/web

    - name: Publish Gateway
      run: dotnet publish SD_Restaurant.Gateway/SD_Restaurant.Gateway.csproj -c Release -o ./publish/gateway

    - name: Upload API artifacts
      uses: actions/upload-artifact@v4
      with:
        name: api-artifacts
        path: ./publish/api

    - name: Upload Web artifacts
      uses: actions/upload-artifact@v4
      with:
        name: web-artifacts
        path: ./publish/web

    - name: Upload Gateway artifacts
      uses: actions/upload-artifact@v4
      with:
        name: gateway-artifacts
        path: ./publish/gateway

  docker-build:
    needs: build
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/main'

    steps:
    - uses: actions/checkout@v4

    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v3

    - name: Log in to Container Registry
      uses: docker/login-action@v3
      with:
        registry: ${{ env.REGISTRY }}
        username: ${{ github.actor }}
        password: ${{ secrets.GITHUB_TOKEN }}

    - name: Extract metadata
      id: meta
      uses: docker/metadata-action@v5
      with:
        images: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}

    - name: Build and push API Docker image
      uses: docker/build-push-action@v5
      with:
        context: .
        target: final-api
        push: true
        tags: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}/api:latest
        cache-from: type=gha
        cache-to: type=gha,mode=max

    - name: Build and push Web Docker image
      uses: docker/build-push-action@v5
      with:
        context: .
        target: final-web
        push: true
        tags: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}/web:latest
        cache-from: type=gha
        cache-to: type=gha,mode=max

    - name: Build and push Gateway Docker image
      uses: docker/build-push-action@v5
      with:
        context: .
        dockerfile: SD_Restaurant.Gateway/Dockerfile
        push: true
        tags: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}/gateway:latest
        cache-from: type=gha
        cache-to: type=gha,mode=max

  deploy-staging:
    needs: docker-build
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/develop'
    environment: staging

    steps:
    - name: Deploy to staging
      run: |
        echo "Deploying to staging environment"
        # Add staging deployment steps here

  deploy-production:
    needs: [docker-build, deploy-staging]
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/main'
    environment: production

    steps:
    - name: Deploy to production
      run: |
        echo "Deploying to production environment"
        # Add production deployment steps here

    - name: Run smoke tests
      run: |
        echo "Running smoke tests after deployment"
        # Add smoke test steps here

    - name: Notify deployment status
      if: always()
      run: |
        echo "Deployment completed"
        # Add notification steps here (Slack, Teams, etc.) 